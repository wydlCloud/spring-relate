<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
">

    <!--开启注解扫描，base-package指定扫描的包路径-->
    <context:component-scan base-package="com.wy.transferIocAnnoXml"/>

    <!--引入外部资源文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--第三方jar中的bean定义在xml中-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--
        lazy-init：延迟加载，true代表延迟，false代表立即加载，默认是false
    -->
    <bean id="lazyResult" class="com.wy.transferIocAnnoXml.pojo.Result" init-method="initMethod"/>

    <!--    aop  切点 + 方位点 + 横切逻辑 组成可以进行面向切面编程，比如性能监控，日志打印等-->
    <!--    进行aop相关的xml配置，配置aop的过程其实就是把aop相关术语落地-->
    <!--    使用config标签表明开始aop配置，在内部配置切面aspect-->
    <!--    aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑 -->

    <!--    横切逻辑-->
    <bean id="logUtils" class="com.wy.transferIocAnnoXml.utils.LogUtils"></bean>

    <!--    使用config中的标签，配置aspectj-->
    <!--    aspectj = 切入点（锁定方法） + 方位点（锁定方法中的特殊时机） + 横切逻辑-->

    <aop:config>
        <!--        引入横切逻辑-->
        <aop:aspect id="logAspect" ref="logUtils">
            <!--            切入点（锁定方法） + 方位点（方法中的特护时机）-->

            <!--切入点锁定我们感兴趣的方法，使用aspectj语法表达式，在这里的切入点是整个实现类下的所有方法，可以自己定义进行匹配-->
            <aop:pointcut id="pt1"
                          expression="execution(* com.wy.transferIocAnnoXml.service.impl.TransferServiceImpl.*(..))"/>

<!--            这下面就应该使用方位点了-->
            <!--方位信息,pointcut-ref关联切入点-->
<!--            <aop:before method="beforeMethod" pointcut-ref="pt1"></aop:before>-->
<!--            <aop:after method="afterMethod" pointcut-ref="pt1"></aop:after>-->
<!--            <aop:after-throwing method="exceptionMethod" pointcut-ref="pt1"></aop:after-throwing>-->
<!--            <aop:after-returning method="successMethod" returning="retVal" pointcut-ref="pt1"></aop:after-returning>-->
            <aop:around method="arroundMethod" pointcut-ref="pt1"></aop:around>
        </aop:aspect>

    </aop:config>

</beans>
